---
- name: "Include os specific variables for Debian hosts"
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: "Update cache on Debian based host"
  ansible.builtin.apt:
    update_cache: true

- name: "Ensure Dependencies Are Installed On Debian host"
  ansible.builtin.apt:
    name: "{{ dependency_list }}"
    update_cache: true
    autoremove: true
    state: present

- name: "Upgrade Debian host"
  ansible.builtin.apt:
    upgrade: 'full'
    update_cache: true
    autoremove: true
    state: latest

- name: "Check if reboot is required"
  ansible.builtin.shell: "{{ needrestart_reboot_cmd }}"
  register: reboot_required
  changed_when: false
  failed_when: false

- name: "Check if service restart is required"
  ansible.builtin.shell: "{{ needrestart_restart_cmd }}"
  register: service_restart
  changed_when: false
  failed_when: false
  when: reboot_required.stdout | int < 2

- name: "Restart services that need to be restarted"
  ansible.builtin.service:
    name: "{{ system_update_item }}"
    state: "restarted"
  loop: "{{ service_restart.stdout_lines }}"
  loop_control:
    loop_var: system_update_item
  when: reboot_required.stdout | int < 2 and service_restart.stdout_lines | length > 0

- name: "Reboot upgraded host"
  ansible.builtin.reboot:
    msg: "Reboot triggered by ansible automatic system upgrade"
    pre_reboot_delay: "{{ system_upgrade_pre_reboot_delay | default(omit) }}"
    post_reboot_delay: "{{ system_upgrade_post_reboot_delay | default(omit) }}"
    reboot_timeout: "{{ system_upgrade_reboot_timeout | default(omit) }}"
    test_command: "{{ system_upgrade_test_command | default(omit) }}"
  when: reboot_required.stdout | int >= 2